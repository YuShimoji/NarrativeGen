{
  "openapi": "3.0.3",
  "info": {
    "title": "NarrativeGen API",
    "description": "Interactive narrative engine API with spreadsheet-driven story creation.\n\n## Engine Architecture\n\n### 1. Narrative Engine (物語エンジン)\n**Design Pattern**: Pure Function + Immutable State\n**Technology**: TypeScript\n**Responsibilities**:\n- Model validation and integrity checking\n- Session state management (immutable updates)\n- Choice evaluation and effect application\n- Node transition logic\n\n**Core Functions**:\n- `loadModel()`: JSON Schema validation + integrity checks\n- `startSession()`: Initial state creation with defaults\n- `getAvailableChoices()`: Condition evaluation\n- `applyChoice()`: Effect application + state transitions\n\n**Key Design Decisions**:\n- Immutable session state (functional programming approach)\n- JSON Schema validation for type safety\n- Pure functions for testability and predictability\n- Error-first validation (fail fast approach)\n\n### 2. AI Engine (AIプロバイダー)\n**Design Pattern**: Strategy Pattern + Provider Interface\n**Technology**: TypeScript + External APIs\n**Responsibilities**:\n- Content generation (next nodes, paraphrases)\n- Multi-provider support (OpenAI, Ollama, Mock)\n- Error handling and fallback mechanisms\n- Token management and rate limiting\n\n**Provider Interface**:\n```typescript\ninterface AIProvider {\n  generateNextNode(context: StoryContext): Promise<string>\n  paraphrase(text: string, options?: ParaphraseOptions): Promise<string[]>\n}\n```\n\n**Supported Providers**:\n- **MockAIProvider**: Testing and development\n- **OpenAIProvider**: Production content generation\n- **OllamaProvider**: Local LLM integration (planned)\n\n**Key Design Decisions**:\n- Provider abstraction for easy switching\n- Async/await for non-blocking operations\n- Comprehensive error handling with fallbacks\n- Configurable parameters (temperature, tokens, style)\n\n### 3. Web Tester Engine (UIエンジン)\n**Design Pattern**: Component-Based Architecture\n**Technology**: Vanilla JavaScript + D3.js\n**Responsibilities**:\n- Model loading and visualization\n- Interactive session playback\n- CSV import/export functionality\n- Real-time state updates and debugging\n\n**Core Components**:\n- **Graph Visualizer**: D3.js force-directed layout\n- **Session Player**: State management and choice application\n- **CSV Processor**: Spreadsheet data parsing and validation\n- **AI Integration**: Provider management and content generation\n\n**Key Design Decisions**:\n- Progressive enhancement (works without JavaScript)\n- Virtual scrolling for large datasets\n- Modular component architecture\n- Event-driven updates\n\n### 4. Entity Engine (エンティティ管理)\n**Design Pattern**: Data Mapper Pattern\n**Technology**: JavaScript + CSV Processing\n**Responsibilities**:\n- Game entity data management\n- CSV data parsing and validation\n- Inventory and resource tracking\n- Entity relationship mapping\n\n**Entity Types**:\n- **Items**: Inventory objects with properties\n- **Resources**: Numeric values (health, gold, etc.)\n- **Flags**: Boolean state indicators\n- **Metadata**: Additional game state information\n\n**Key Design Decisions**:\n- CSV-based configuration for non-technical users\n- Type-safe entity definitions\n- Relationship validation\n- Extensible property system",
    "version": "1.0.0",
    "contact": {
      "name": "YuShimoji",
      "url": "https://github.com/YuShimoji/NarrativeGen"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "http://localhost:3001/api",
      "description": "Development server"
    },
    {
      "url": "https://api.narrativegen.com/api",
      "description": "Production server"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "apiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "X-API-Key"
      }
    },
    "schemas": {
      "Model": {
        "type": "object",
        "required": ["id", "name", "version", "startNode", "nodes"],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the model"
          },
          "name": {
            "type": "string",
            "description": "Human-readable name of the model"
          },
          "description": {
            "type": "string",
            "description": "Detailed description of the model"
          },
          "version": {
            "type": "string",
            "description": "Version of the model"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last update timestamp"
          },
          "startNode": {
            "type": "string",
            "description": "ID of the starting node"
          },
          "nodes": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Node"
            },
            "description": "Map of node IDs to node objects"
          },
          "flags": {
            "type": "object",
            "additionalProperties": {
              "type": "boolean"
            },
            "description": "Global flags for the model"
          },
          "resources": {
            "type": "object",
            "additionalProperties": {
              "type": "number"
            },
            "description": "Global resources for the model"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": true,
            "description": "Additional metadata"
          }
        }
      },
      "Node": {
        "type": "object",
        "required": ["id", "text"],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the node"
          },
          "text": {
            "type": "string",
            "description": "Text content of the node"
          },
          "type": {
            "type": "string",
            "enum": ["normal", "ending", "choice"],
            "default": "normal",
            "description": "Type of the node"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags associated with the node"
          },
          "assets": {
            "type": "object",
            "additionalProperties": true,
            "description": "Media assets for the node"
          },
          "choices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Choice"
            },
            "description": "Available choices from this node"
          }
        }
      },
      "Choice": {
        "type": "object",
        "required": ["id", "text", "target"],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the choice"
          },
          "text": {
            "type": "string",
            "description": "Display text for the choice"
          },
          "target": {
            "type": "string",
            "description": "ID of the target node"
          },
          "conditions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Condition"
            },
            "description": "Conditions that must be met to show this choice"
          },
          "effects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Effect"
            },
            "description": "Effects applied when this choice is selected"
          },
          "outcome": {
            "$ref": "#/components/schemas/Outcome",
            "description": "Outcome information"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": true,
            "description": "Additional metadata"
          },
          "variables": {
            "type": "object",
            "additionalProperties": true,
            "description": "Variable data"
          }
        }
      },
      "Condition": {
        "type": "object",
        "required": ["type"],
        "discriminator": {
          "propertyName": "type"
        },
        "properties": {
          "type": {
            "type": "string",
            "enum": ["flag", "resource", "timeWindow"],
            "description": "Type of condition"
          }
        },
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": ["flag"]
              },
              "key": {
                "type": "string",
                "description": "Flag key"
              },
              "value": {
                "type": "boolean",
                "description": "Expected flag value"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": ["resource"]
              },
              "key": {
                "type": "string",
                "description": "Resource key"
              },
              "op": {
                "type": "string",
                "enum": [">=", "<=", ">", "<", "=="],
                "description": "Comparison operator"
              },
              "value": {
                "type": "number",
                "description": "Expected resource value"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": ["timeWindow"]
              },
              "start": {
                "type": "integer",
                "description": "Start time"
              },
              "end": {
                "type": "integer",
                "description": "End time"
              }
            }
          }
        ]
      },
      "Effect": {
        "type": "object",
        "required": ["type"],
        "discriminator": {
          "propertyName": "type"
        },
        "properties": {
          "type": {
            "type": "string",
            "enum": ["setFlag", "addResource", "multiplyResource", "setResource", "randomEffect", "conditionalEffect", "goto"],
            "description": "Type of effect"
          }
        },
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": ["setFlag"]
              },
              "key": {
                "type": "string",
                "description": "Flag key"
              },
              "value": {
                "type": "boolean",
                "description": "Flag value to set"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": ["addResource"]
              },
              "key": {
                "type": "string",
                "description": "Resource key"
              },
              "delta": {
                "type": "number",
                "description": "Amount to add to resource"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": ["multiplyResource"]
              },
              "key": {
                "type": "string",
                "description": "Resource key"
              },
              "factor": {
                "type": "number",
                "description": "Multiplication factor"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": ["setResource"]
              },
              "key": {
                "type": "string",
                "description": "Resource key"
              },
              "value": {
                "type": "number",
                "description": "Resource value to set"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": ["goto"]
              },
              "target": {
                "type": "string",
                "description": "Target node ID"
              }
            }
          }
        ]
      },
      "Outcome": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of outcome"
          },
          "value": {
            "type": "string",
            "description": "Outcome value"
          }
        }
      },
      "Session": {
        "type": "object",
        "required": ["id", "modelId", "nodeId", "flags", "resources", "time"],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the session"
          },
          "modelId": {
            "type": "string",
            "description": "ID of the model being played"
          },
          "userId": {
            "type": "string",
            "description": "ID of the user playing the session"
          },
          "nodeId": {
            "type": "string",
            "description": "Current node ID"
          },
          "flags": {
            "type": "object",
            "additionalProperties": {
              "type": "boolean"
            },
            "description": "Current flag states"
          },
          "resources": {
            "type": "object",
            "additionalProperties": {
              "type": "number"
            },
            "description": "Current resource states"
          },
          "time": {
            "type": "integer",
            "description": "Current time step"
          },
          "history": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SessionStep"
            },
            "description": "Session history"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last update timestamp"
          }
        }
      },
      "SessionStep": {
        "type": "object",
        "properties": {
          "nodeId": {
            "type": "string",
            "description": "Node ID at this step"
          },
          "choiceId": {
            "type": "string",
            "description": "Choice ID selected at this step"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of this step"
          }
        }
      },
      "AIGenerateRequest": {
        "type": "object",
        "required": ["provider", "context"],
        "properties": {
          "provider": {
            "type": "string",
            "enum": ["openai", "mock"],
            "description": "AI provider to use"
          },
          "context": {
            "type": "object",
            "required": ["previousNodes", "currentNodeText", "choiceText"],
            "properties": {
              "previousNodes": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Previous node texts for context"
              },
              "currentNodeText": {
                "type": "string",
                "description": "Current node text"
              },
              "choiceText": {
                "type": "string",
                "description": "Choice text being generated for"
              }
            }
          },
          "options": {
            "type": "object",
            "properties": {
              "maxTokens": {
                "type": "integer",
                "minimum": 1,
                "maximum": 4000,
                "description": "Maximum tokens to generate"
              },
              "temperature": {
                "type": "number",
                "minimum": 0,
                "maximum": 2,
                "description": "Creativity temperature (0-2)"
              }
            }
          }
        }
      },
      "AIGenerateResponse": {
        "type": "object",
        "required": ["text", "metadata"],
        "properties": {
          "text": {
            "type": "string",
            "description": "Generated text"
          },
          "metadata": {
            "type": "object",
            "required": ["provider", "model", "tokens", "duration"],
            "properties": {
              "provider": {
                "type": "string",
                "description": "AI provider used"
              },
              "model": {
                "type": "string",
                "description": "AI model used"
              },
              "tokens": {
                "type": "integer",
                "description": "Tokens used"
              },
              "duration": {
                "type": "number",
                "description": "Generation duration in milliseconds"
              }
            }
          }
        }
      },
      "Error": {
        "type": "object",
        "required": ["message"],
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message"
          },
          "code": {
            "type": "string",
            "description": "Error code"
          },
          "details": {
            "type": "object",
            "additionalProperties": true,
            "description": "Additional error details"
          }
        }
      }
    }
  },
  "paths": {
    "/health": {
      "get": {
        "summary": "Health check endpoint",
        "description": "Check if the API is running and healthy",
        "operationId": "healthCheck",
        "responses": {
          "200": {
            "description": "API is healthy",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "healthy"
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "version": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/models": {
      "get": {
        "summary": "List available models",
        "description": "Get a list of all available narrative models",
        "operationId": "listModels",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            },
            "description": "Maximum number of models to return"
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "description": "Number of models to skip"
          }
        ],
        "responses": {
          "200": {
            "description": "List of models",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "models": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Model"
                      }
                    },
                    "total": {
                      "type": "integer",
                      "description": "Total number of models"
                    },
                    "limit": {
                      "type": "integer",
                      "description": "Requested limit"
                    },
                    "offset": {
                      "type": "integer",
                      "description": "Requested offset"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new model",
        "description": "Create a new narrative model",
        "operationId": "createModel",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Model"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Model created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Model"
                }
              }
            }
          },
          "400": {
            "description": "Invalid model data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/models/{id}": {
      "get": {
        "summary": "Get a specific model",
        "description": "Get details of a specific narrative model",
        "operationId": "getModel",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Model ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Model details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Model"
                }
              }
            }
          },
          "404": {
            "description": "Model not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a model",
        "description": "Update an existing narrative model",
        "operationId": "updateModel",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Model ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Model"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Model updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Model"
                }
              }
            }
          },
          "400": {
            "description": "Invalid model data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Model not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "summary": "Delete a model",
        "description": "Delete an existing narrative model",
        "operationId": "deleteModel",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Model ID"
          }
        ],
        "responses": {
          "204": {
            "description": "Model deleted successfully"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Model not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/models/import": {
      "post": {
        "summary": "Import a model",
        "description": "Import a model from CSV or JSON format",
        "operationId": "importModel",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "Model file (CSV or JSON)"
                  },
                  "name": {
                    "type": "string",
                    "description": "Name for the imported model"
                  }
                },
                "required": ["file"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Model imported successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Model"
                }
              }
            }
          },
          "400": {
            "description": "Invalid file or data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/models/{id}/export": {
      "get": {
        "summary": "Export a model",
        "description": "Export a model in CSV or JSON format",
        "operationId": "exportModel",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Model ID"
          },
          {
            "name": "format",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["json", "csv"],
              "default": "json"
            },
            "description": "Export format"
          }
        ],
        "responses": {
          "200": {
            "description": "Model exported successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Model"
                }
              },
              "text/csv": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Model not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sessions": {
      "post": {
        "summary": "Create a new session",
        "description": "Start a new narrative session with a model",
        "operationId": "createSession",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["modelId"],
                "properties": {
                  "modelId": {
                    "type": "string",
                    "description": "ID of the model to start session with"
                  },
                  "initialFlags": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "boolean"
                    },
                    "description": "Initial flag states"
                  },
                  "initialResources": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "number"
                    },
                    "description": "Initial resource states"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Session created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Model not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sessions/{id}": {
      "get": {
        "summary": "Get session details",
        "description": "Get the current state of a narrative session",
        "operationId": "getSession",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Session ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Session details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            }
          },
          "404": {
            "description": "Session not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update session",
        "description": "Update the state of a narrative session",
        "operationId": "updateSession",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Session ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "flags": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "boolean"
                    },
                    "description": "Updated flag states"
                  },
                  "resources": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "number"
                    },
                    "description": "Updated resource states"
                  },
                  "nodeId": {
                    "type": "string",
                    "description": "New current node ID"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Session updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Session not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete session",
        "description": "End and delete a narrative session",
        "operationId": "deleteSession",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Session ID"
          }
        ],
        "responses": {
          "204": {
            "description": "Session deleted successfully"
          },
          "404": {
            "description": "Session not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sessions/{id}/choice": {
      "post": {
        "summary": "Apply choice to session",
        "description": "Apply a choice selection to advance the narrative session",
        "operationId": "applyChoice",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Session ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["choiceId"],
                "properties": {
                  "choiceId": {
                    "type": "string",
                    "description": "ID of the choice to apply"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Choice applied successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            }
          },
          "400": {
            "description": "Invalid choice or session state",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Session not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sessions/{id}/history": {
      "get": {
        "summary": "Get session history",
        "description": "Get the complete history of choices made in a session",
        "operationId": "getSessionHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Session ID"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 1000,
              "default": 100
            },
            "description": "Maximum number of history entries to return"
          }
        ],
        "responses": {
          "200": {
            "description": "Session history",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "sessionId": {
                      "type": "string"
                    },
                    "history": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SessionStep"
                      }
                    },
                    "total": {
                      "type": "integer",
                      "description": "Total number of history entries"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Session not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/ai/generate": {
      "post": {
        "summary": "Generate content with AI",
        "description": "Generate narrative content using AI providers",
        "operationId": "generateAIContent",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AIGenerateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Content generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AIGenerateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized or invalid API key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Rate limit exceeded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "503": {
            "description": "AI service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          },
          {
            "apiKeyAuth": []
          }
        ]
      }
    },
    "/ai/paraphrase": {
      "post": {
        "summary": "Paraphrase text with AI",
        "description": "Generate paraphrased versions of text using AI",
        "operationId": "paraphraseText",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["text"],
                "properties": {
                  "text": {
                    "type": "string",
                    "description": "Text to paraphrase"
                  },
                  "style": {
                    "type": "string",
                    "enum": ["formal", "casual", "desu-masu", "creative"],
                    "default": "casual",
                    "description": "Paraphrasing style"
                  },
                  "count": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 5,
                    "default": 3,
                    "description": "Number of paraphrases to generate"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Text paraphrased successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "original": {
                      "type": "string",
                      "description": "Original text"
                    },
                    "paraphrases": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Generated paraphrases"
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "provider": {
                          "type": "string"
                        },
                        "style": {
                          "type": "string"
                        },
                        "count": {
                          "type": "integer"
                        },
                        "duration": {
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          },
          {
            "apiKeyAuth": []
          }
        ]
      }
    },
    "/ai/providers": {
      "get": {
        "summary": "List AI providers",
        "description": "Get a list of available AI providers and their configurations",
        "operationId": "listAIProviders",
        "responses": {
          "200": {
            "description": "List of AI providers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "providers": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "enum": ["openai", "mock"]
                          },
                          "name": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "models": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "status": {
                            "type": "string",
                            "enum": ["available", "unavailable", "maintenance"]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/analytics/sessions": {
      "get": {
        "summary": "Get session analytics",
        "description": "Get analytics data about narrative sessions",
        "operationId": "getSessionAnalytics",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Start date for analytics (YYYY-MM-DD)"
          },
          {
            "name": "endDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "End date for analytics (YYYY-MM-DD)"
          },
          {
            "name": "modelId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Filter by model ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Session analytics data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "totalSessions": {
                      "type": "integer"
                    },
                    "activeSessions": {
                      "type": "integer"
                    },
                    "completedSessions": {
                      "type": "integer"
                    },
                    "averageSessionLength": {
                      "type": "number"
                    },
                    "popularChoices": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "choiceId": {
                            "type": "string"
                          },
                          "count": {
                            "type": "integer"
                          }
                        }
                      }
                    },
                    "endingDistribution": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/debug/logs": {
      "get": {
        "summary": "Get debug logs",
        "description": "Get application debug logs for troubleshooting",
        "operationId": "getDebugLogs",
        "parameters": [
          {
            "name": "level",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["error", "warn", "info", "debug"],
              "default": "error"
            },
            "description": "Minimum log level to return"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 1000,
              "default": 100
            },
            "description": "Maximum number of log entries to return"
          },
          {
            "name": "startTime",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Start time for logs"
          }
        ],
        "responses": {
          "200": {
            "description": "Debug logs",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "logs": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "timestamp": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "level": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          },
                          "context": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    },
                    "total": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    }
  }
}
