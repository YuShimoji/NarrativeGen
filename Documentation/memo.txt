

・Entity：プロパティを持つ。
・プロパティ｛
　- 既定値
　- 設定値 0.2
　- 範囲 2 ~ 4
　- 範囲 ±3%
　- その他ラベルなど。
｝
・「既定値」を設定しておく思想により、細かい設定もれ防止・変数設定地獄を防止。
・ストーリー生成は入れ子構造
・全ての要素は置き換え可能性・追加可能性
・ストーリー ｛章：節：場：幕など何でも｝
　章1｛節1｛段落1, 段落4～6から2つ, 段落2, 段落42｝  節2｛段落n、段落n……｝｝章2｛……｝
　段落12｛文章24, 文章[プロパティ：現代の建物の中の情景描写], 文章[プロパティ：現代的製品の説明文からどれか一つ], 文章[語り手の心理描写21～24のうちどれか2つ][心理描写22～23のうち使われていない文（両方とも使われていた場合22）]｝
・章＜段落＜文章＜文＜単語

◯csvでの構文ルールについて/文・文章・段落生成エンジンについて
まだ漠然としてはいますが、以下のように区切りたいと思っています。
[　[あなたは]　[薄暗い[石の部屋]]　[に立っている。]　[[目の前には]　[[古い][木製の][ドア]]がある。]　[　[きしんだ音]が[[[窓]の方]から聞こえる。]　]
※これは例として考えてください。

具体的には、下記のようにざっくりとわけたうえで、段階的な分割を考えてください。
{scene description:[You are currently at [LOCATION]], {There is [OBJECT] in front of you.}, {You hear [sound] from [direction].}}

・部分的に置き換えた例（最も完成形に近い）
{scene description:[あなたは[LOCATION]に立っている。}, {目の前には[OBJECT]がある。}, {[sound] が [direction]から聞こえる。}}

=================
単語・文・文章辞書（各言語独自）について。

[「[窓]が[開いているな」、] [と気づいた。]
　という文章があった場合、
・（どうやら窓が開いているようだ）
・窓が開いているのが見えた。
・ふと見ると、窓が開いていることに気づいた。

のように「言い換え」ができます。
こうした「言い換え」は、あらかじめ構文を作っておきます。これはライターの重要な作業の一つです。

上記のように、複数の「ライン」を、
・辞書内の「同一リスト」に登録しておく。
・ラインにプロパティを登録しておく。
ことにより、いずれかの条件によって特定のどれかのラインがトリガーされます。
※単語や文章や構文などが、複数の同一評価の要素から決められない場合、ランダム選択を既定値としておきます。

ラインのプロパティには、「人称」「文字数（または判定時に計算）」「口調」「文体の硬さ：0.5」「誰々の文体風度：0.7」などのように追加可能です（無指定の場合、既定値が参照される）。
また、文章の中の[窓]といったEntityも、それぞれプロパティを持っています（材質、ふるさ、色、大きさ、重さ、価値、など）。「」

各ラインは、ゲーム内のデータで「何回記述されたか」などプロパティを持っておき、頻繁に繰り返さないようにできます。

◯アドバンスドな辞書エンジン
・全く同じプロパティを持っている文・単語・文章から選択。
・「情報n個まで未提示可」など猶予条件を参照し、文・単語・文章を選択。内容にばらつきを出す。

◯単語辞書
[窓]を参照することで、窓の状態も描写に含めることができます。
・窓にあらかじめ「漆喰塗の白い壁にある、割れた、古びた、木製の、木枠の、透明な、薄汚れた、暫くの間誰も手を付けていない」、のような「状態」が登録されていることで、適宜、更に別の「レトリックのための辞書」から「窓」の描写に説得力を与えられます。
　これもライターの重要なタスクです。
・このときに、窓の状態のどういう描写を説明したか、更に別の「辞書」に登録していきます。これにより、ストーリー内での齟齬や表現の豊かさを実現します。（つまり、オブジェクトを登録している辞書には、毎回、いま語られるよりも多くの情報が既に最初からあることになります。）

=================


◯推論エンジンについて。
・ゲーム内の事物はすべてEntityとして扱い、構造体のように振る舞い、プロパティを持っています。
・Entityの種類：人物、持ち物、ある事件、記事のトピック、ある一つの商品、商品名、所持金、ある組織、などあらゆる「特定の」事物。
・「誰々が食べていたマックのチーズバーガー」という例では、「マックのチーズバーガー」をEntityとしては考えません。
「誰々が食べていたマックのチーズバーガー 」そのものをEntityとして考え、「誰々が食べていたマックのチーズバーガー 」のプロパティに「コモン：マックのチーズバーガー」「マクドナルドの製品」「商品名：チーズバーガー」と持たせます。このEntityには、「食品」「携帯食料」「購入時価格」「重さ：0.12」「大きさ：0.35」などを持たせることができます。
「携帯食料」には初期値「重さ：0.1」「大きさ：0.1」など があり、「誰々が食べていた～」のEntityで無指定の場合、この値が参照されます。更に、「コモン：マックのチーズバーガー」が存在する場合、その「コモン：マックのチーズバーガー」 の値に上書きされます。
「コモン：マックのチーズバーガー」 の初期値「重さ：0.1」「大きさ：0.3」とあった場合、「コモン：マックのチーズバーガー」を持っている 「誰々が食べていた～」は、値が参照され、「それを調べたキャラクターの知識を参照」します（キャラクターの「マックのチーズバーガー」についての知識は、無指定や、【都会の現代人】のようなプリセット値から自動的に決めてもよいです）。
「マックのチーズバーガー」は、「マクドナルドの製品」をプロパティを持っており、「マクドナルドの製品」は「現代の製品」プロパティを持っています。
【都会の現代人】のプリセットは、「現代の製品」を参照し、各値の誤差「30%~10%（無指定の場合）」を参照します。
【都会の現代人】の認識：重さ0.1と重さ0.12を比較した時、±10%の範囲外であるため、この【都会の現代人】は「誰々が食べていた～」に対して違和感を引き起こします。
「[[微妙に][大きい。]] [本当に[チーズバーガー]だったのか？]」という違和感をトリガーします。

もし酩酊状態なら、程度に応じて±21%～±30%のようになり、範囲外であるため、違和感に気づけません。他のキャラクターから「何か違和感はないか？」と訊ねられても「いや、何も？（酩酊状態であることも考慮したセリフリストから選択され）」のような間の抜けた回答をしてしまい、この事は「事象Entity」として記録されます。あとになって、「だから言ったんだ。あんなに飲んで捜査するバカがいるか。気が抜けていたんだ（セリフリストから相手の正確や状態など考慮し選定）」のように言われてしまいます。

更に、その「責められたこと(辛辣さ：75。妥当：99)」のようなことも事象Entityとして記録されます。この経験は、「でもあのときにあんな事言われたからな……」のような会話に繋がります（全て、適切なタイミングで、記録された事象Entityが持つタイムスタンプやプロパティを参照します）

適切なタイミング：たとえば車に乗って移動中、誰かと話して、共通の話題となったとき、「あのときにあんな辛辣なことを言われた（妥当だが）」のように考えたり、話に発展したりします。
=======================

